"use strict";(self.webpackChunktemp_docs=self.webpackChunktemp_docs||[]).push([[9012],{7095:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>d,contentTitle:()=>a,default:()=>h,frontMatter:()=>o,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"components/drawer","title":"Drawer","description":"The Drawer component is a sliding panel that appears from the edge of the screen. It\'s commonly used for navigation menus, filters, or additional content that complements the main view. The component is fully theme-aware and supports light/dark modes through the ThemeProvider.","source":"@site/docs/components/drawer.mdx","sourceDirName":"components","slug":"/components/drawer","permalink":"/lazy-panda-ui/components/drawer","draft":false,"unlisted":false,"editUrl":"https://github.com/lazy-panda-ui/lazy-panda-ui/tree/main/temp-docs/docs/components/drawer.mdx","tags":[],"version":"current","sidebarPosition":17,"frontMatter":{"sidebar_position":17},"sidebar":"tutorialSidebar","previous":{"title":"Dialog","permalink":"/lazy-panda-ui/components/dialog"},"next":{"title":"Grid","permalink":"/lazy-panda-ui/components/grid"}}');var s=r(4848),i=r(8453);const o={sidebar_position:17},a="Drawer",d={},l=[{value:"Import",id:"import",level:2},{value:"Usage",id:"usage",level:2},{value:"Props",id:"props",level:2},{value:"Drawer Props",id:"drawer-props",level:3},{value:"Drawer.Header Props",id:"drawerheader-props",level:3},{value:"Drawer.Content Props",id:"drawercontent-props",level:3},{value:"Drawer.Footer Props",id:"drawerfooter-props",level:3},{value:"Examples",id:"examples",level:2},{value:"Basic Drawer",id:"basic-drawer",level:3},{value:"Different Placements",id:"different-placements",level:3},{value:"Different Sizes",id:"different-sizes",level:3},{value:"Animation and Easing",id:"animation-and-easing",level:3},{value:"Navigation Drawer",id:"navigation-drawer",level:3},{value:"Filter Drawer",id:"filter-drawer",level:3},{value:"Theme Customization",id:"theme-customization",level:2},{value:"Theme Configuration",id:"theme-configuration",level:3},{value:"Custom Styles",id:"custom-styles",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"Size Reference",id:"size-reference",level:2},{value:"Accessibility",id:"accessibility",level:2},{value:"React Native Accessibility",id:"react-native-accessibility",level:3},{value:"Features",id:"features",level:3},{value:"Animation Details",id:"animation-details",level:2},{value:"Platform Differences",id:"platform-differences",level:2},{value:"Android",id:"android",level:3},{value:"iOS",id:"ios",level:3},{value:"Related Components",id:"related-components",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"drawer",children:"Drawer"})}),"\n",(0,s.jsx)(n.p,{children:"The Drawer component is a sliding panel that appears from the edge of the screen. It's commonly used for navigation menus, filters, or additional content that complements the main view. The component is fully theme-aware and supports light/dark modes through the ThemeProvider."}),"\n",(0,s.jsx)(n.h2,{id:"import",children:"Import"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:"import { Drawer } from '@lazy-panda-ui/lazy-panda-ui';\n"})}),"\n",(0,s.jsx)(n.h2,{id:"usage",children:"Usage"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:"import React, { useState } from 'react';\nimport { Drawer, Button, Typography } from '@lazy-panda-ui/lazy-panda-ui';\n\nfunction MyComponent() {\n  const [open, setOpen] = useState(false);\n\n  return (\n    <>\n      <Button onPress={() => setOpen(true)}>\n        Open Drawer\n      </Button>\n\n      <Drawer open={open} onClose={() => setOpen(false)}>\n        <Drawer.Header>Drawer Title</Drawer.Header>\n        <Drawer.Content>\n          <Typography>This is the drawer content.</Typography>\n        </Drawer.Content>\n        <Drawer.Footer>\n          <Button onPress={() => setOpen(false)}>\n            Close\n          </Button>\n        </Drawer.Footer>\n      </Drawer>\n    </>\n  );\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"props",children:"Props"}),"\n",(0,s.jsx)(n.h3,{id:"drawer-props",children:"Drawer Props"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Name"}),(0,s.jsx)(n.th,{children:"Type"}),(0,s.jsx)(n.th,{children:"Default"}),(0,s.jsx)(n.th,{children:"Description"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"open"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"boolean"})}),(0,s.jsx)(n.td,{children:"-"}),(0,s.jsx)(n.td,{children:"Whether the drawer is open/visible"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"onClose"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"() => void"})}),(0,s.jsx)(n.td,{children:"-"}),(0,s.jsx)(n.td,{children:"Callback function called when the drawer should be closed"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"placement"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"'left' | 'right' | 'top' | 'bottom'"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"'right'"})}),(0,s.jsx)(n.td,{children:"The side of the screen from which the drawer slides in"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"size"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"'sm' | 'md' | 'lg' | 'xl' | 'full'"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"'md'"})}),(0,s.jsx)(n.td,{children:"The size of the drawer as a percentage of screen dimension"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"closeOnOverlayClick"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"boolean"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"true"})}),(0,s.jsx)(n.td,{children:"Whether clicking the overlay should close the drawer"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"closeOnEscape"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"boolean"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"true"})}),(0,s.jsx)(n.td,{children:"Whether pressing the back button (Android) should close the drawer"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"trapFocus"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"boolean"})}),(0,s.jsx)(n.td,{children:"-"}),(0,s.jsx)(n.td,{children:"Whether focus should be trapped within the drawer (for accessibility)"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"returnFocus"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"boolean"})}),(0,s.jsx)(n.td,{children:"-"}),(0,s.jsx)(n.td,{children:"Whether focus should return to the previous element when drawer closes"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"overlayColor"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"string"})}),(0,s.jsx)(n.td,{children:"theme value"}),(0,s.jsx)(n.td,{children:"Overlay background color (defaults to theme.drawer.backdrop)"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"children"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"React.ReactNode"})}),(0,s.jsx)(n.td,{children:"-"}),(0,s.jsx)(n.td,{children:"The content to be rendered inside the drawer"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"style"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"ViewStyle"})}),(0,s.jsx)(n.td,{children:"-"}),(0,s.jsx)(n.td,{children:"Additional styles for the drawer container"})]})]})]}),"\n",(0,s.jsx)(n.h3,{id:"drawerheader-props",children:"Drawer.Header Props"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Name"}),(0,s.jsx)(n.th,{children:"Type"}),(0,s.jsx)(n.th,{children:"Default"}),(0,s.jsx)(n.th,{children:"Description"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"children"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"React.ReactNode"})}),(0,s.jsx)(n.td,{children:"-"}),(0,s.jsx)(n.td,{children:"The content to be rendered in the header. Can be a string or JSX"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"showCloseButton"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"boolean"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"true"})}),(0,s.jsx)(n.td,{children:"Whether to show the close button in the header"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"closeButtonProps"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"any"})}),(0,s.jsx)(n.td,{children:"-"}),(0,s.jsx)(n.td,{children:"Props to pass to the close button component"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"style"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"ViewStyle"})}),(0,s.jsx)(n.td,{children:"-"}),(0,s.jsx)(n.td,{children:"Additional styles for the header container"})]})]})]}),"\n",(0,s.jsx)(n.h3,{id:"drawercontent-props",children:"Drawer.Content Props"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Name"}),(0,s.jsx)(n.th,{children:"Type"}),(0,s.jsx)(n.th,{children:"Default"}),(0,s.jsx)(n.th,{children:"Description"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"children"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"React.ReactNode"})}),(0,s.jsx)(n.td,{children:"-"}),(0,s.jsx)(n.td,{children:"The main content to be rendered in the drawer body"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"style"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"ViewStyle"})}),(0,s.jsx)(n.td,{children:"-"}),(0,s.jsx)(n.td,{children:"Additional styles for the content container"})]})]})]}),"\n",(0,s.jsx)(n.h3,{id:"drawerfooter-props",children:"Drawer.Footer Props"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Name"}),(0,s.jsx)(n.th,{children:"Type"}),(0,s.jsx)(n.th,{children:"Default"}),(0,s.jsx)(n.th,{children:"Description"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"children"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"React.ReactNode"})}),(0,s.jsx)(n.td,{children:"-"}),(0,s.jsx)(n.td,{children:"The content to be rendered in the footer (typically buttons)"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"style"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"ViewStyle"})}),(0,s.jsx)(n.td,{children:"-"}),(0,s.jsx)(n.td,{children:"Additional styles for the footer container"})]})]})]}),"\n",(0,s.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,s.jsx)(n.h3,{id:"basic-drawer",children:"Basic Drawer"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:'<Drawer open={open} onClose={onClose}>\n  <Drawer.Header>Navigation</Drawer.Header>\n  <Drawer.Content>\n    <Stack spacing="md">\n      <Button variant="ghost" onPress={() => navigate(\'/\')}>Home</Button>\n      <Button variant="ghost" onPress={() => navigate(\'/profile\')}>Profile</Button>\n      <Button variant="ghost" onPress={() => navigate(\'/settings\')}>Settings</Button>\n    </Stack>\n  </Drawer.Content>\n</Drawer>\n'})}),"\n",(0,s.jsx)(n.h3,{id:"different-placements",children:"Different Placements"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:"{['left', 'right', 'top', 'bottom'].map((placement) => (\n  <Button\n    key={placement}\n    onPress={() => openDrawer(placement)}\n  >\n    Open {placement} drawer\n  </Button>\n))}\n\n<Drawer\n  open={open}\n  onClose={onClose}\n  placement={placement}\n>\n  <Drawer.Header>\n    {placement} Drawer\n  </Drawer.Header>\n  <Drawer.Content>\n    <Typography>Content for {placement} drawer</Typography>\n  </Drawer.Content>\n</Drawer>\n"})}),"\n",(0,s.jsx)(n.h3,{id:"different-sizes",children:"Different Sizes"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:"<Drawer\n  open={open}\n  onClose={onClose}\n  size={size} // 'sm', 'md', 'lg', 'xl', 'full'\n>\n  <Drawer.Header>\n    {size} Drawer\n  </Drawer.Header>\n  <Drawer.Content>\n    <Typography>Content for {size} drawer</Typography>\n  </Drawer.Content>\n</Drawer>\n"})}),"\n",(0,s.jsx)(n.h3,{id:"animation-and-easing",children:"Animation and Easing"}),"\n",(0,s.jsx)(n.p,{children:"You can control the animation duration and easing globally via the theme. The overlay fade uses the native driver for smoothness, and the slide uses the configured easing."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:"const customTheme = {\n  ...defaultTheme,\n  drawer: {\n    ...defaultTheme.drawer,\n    animation: {\n      duration: 400,\n      easing: 'easeOut', // 'linear' | 'easeIn' | 'easeOut' | 'easeInOut'\n    },\n  },\n};\n\n<ThemeProvider theme={customTheme}>\n  <Drawer open={open} onClose={onClose} />\n  {/* ... */}\n</ThemeProvider>\n"})}),"\n",(0,s.jsx)(n.h3,{id:"navigation-drawer",children:"Navigation Drawer"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:'<Drawer open={open} onClose={onClose} placement="left">\n  <Drawer.Header>Menu</Drawer.Header>\n  <Drawer.Content>\n    <Stack spacing="md">\n      <Button \n        variant="ghost" \n        onPress={() => navigate(\'/\')}\n      >\n        \ud83c\udfe0 Home\n      </Button>\n      <Button \n        variant="ghost" \n        onPress={() => navigate(\'/profile\')}\n      >\n        \ud83d\udc64 Profile\n      </Button>\n      <Button \n        variant="ghost" \n        onPress={() => navigate(\'/settings\')}\n      >\n        \u2699\ufe0f Settings\n      </Button>\n      <Divider />\n      <Button \n        variant="ghost" \n        onPress={handleLogout}\n      >\n        \ud83d\udeaa Logout\n      </Button>\n    </Stack>\n  </Drawer.Content>\n</Drawer>\n'})}),"\n",(0,s.jsx)(n.h3,{id:"filter-drawer",children:"Filter Drawer"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:'<Drawer open={open} onClose={onClose} placement="right">\n  <Drawer.Header>Filters</Drawer.Header>\n  <Drawer.Content>\n    <Stack spacing="lg">\n      <Select\n        label="Category"\n        value={category}\n        onValueChange={setCategory}\n        items={categories}\n      />\n      <Slider\n        label="Price Range"\n        value={priceRange}\n        onValueChange={setPriceRange}\n        minimumValue={0}\n        maximumValue={1000}\n      />\n      <Stack spacing="sm">\n        <Typography variant="h6">Brands</Typography>\n        {availableBrands.map(brand => (\n          <CheckBox\n            key={brand}\n            label={brand}\n            value={brands.includes(brand)}\n            onValueChange={(checked) => toggleBrand(brand, checked)}\n          />\n        ))}\n      </Stack>\n    </Stack>\n  </Drawer.Content>\n  <Drawer.Footer>\n    <Stack direction="row" spacing="sm">\n      <Button variant="outlined" onPress={resetFilters}>\n        Reset\n      </Button>\n      <Button onPress={applyFilters}>\n        Apply Filters\n      </Button>\n    </Stack>\n  </Drawer.Footer>\n</Drawer>\n'})}),"\n",(0,s.jsx)(n.h2,{id:"theme-customization",children:"Theme Customization"}),"\n",(0,s.jsx)(n.p,{children:"The Drawer component is fully configurable through the ThemeProvider. All visual aspects can be customized through the theme configuration."}),"\n",(0,s.jsx)(n.h3,{id:"theme-configuration",children:"Theme Configuration"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:"const customTheme = {\n  ...defaultTheme,\n  drawer: {\n    backdrop: {\n      color: '#000000',    // Overlay color\n      opacity: 0.6,        // Overlay opacity\n    },\n    container: {\n      backgroundColor: '#ffffff',  // Drawer background\n      borderRadius: 8,             // Border radius for corners\n      shadow: {\n        color: '#000000',\n        offset: { width: 0, height: 4 },\n        opacity: 0.3,\n        radius: 6,\n        elevation: 8,\n      },\n    },\n    header: {\n      backgroundColor: '#f8f9fa',  // Header background\n      borderColor: '#e9ecef',       // Header border\n      borderWidth: 1,\n      padding: 20,\n      minHeight: 64,\n    },\n    content: {\n      backgroundColor: '#ffffff',  // Content background\n      padding: 24,\n    },\n    footer: {\n      backgroundColor: '#f8f9fa',  // Footer background\n      borderColor: '#e9ecef',       // Footer border\n      borderWidth: 1,\n      padding: 20,\n      minHeight: 64,\n    },\n    animation: {\n  duration: 400,               // Animation duration in ms\n  easing: 'easeInOut',         // Animation easing ('linear' | 'easeIn' | 'easeOut' | 'easeInOut')\n    },\n    sizes: {\n      sm: 0.3,    // 30% of screen dimension\n      md: 0.5,    // 50% of screen dimension\n      lg: 0.7,    // 70% of screen dimension\n      xl: 0.9,    // 90% of screen dimension\n    },\n  },\n};\n\n// Use with ThemeProvider\n<ThemeProvider theme={customTheme}>\n  <Drawer open={open} onClose={onClose}>\n    {/* Drawer content */}\n  </Drawer>\n</ThemeProvider>\n"})}),"\n",(0,s.jsx)(n.h3,{id:"custom-styles",children:"Custom Styles"}),"\n",(0,s.jsx)(n.p,{children:"You can also override styles directly using the style props:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:"<Drawer\n  open={open}\n  onClose={onClose}\n  style={{\n    backgroundColor: '#f8f9fa',\n    borderRadius: 16,\n  }}\n  overlayColor=\"rgba(0, 0, 0, 0.8)\"\n>\n  <Drawer.Header \n    style={{ \n      backgroundColor: '#007AFF',\n      borderBottomWidth: 0,\n    }}\n  >\n    <Typography variant=\"h6\" style={{ color: 'white' }}>\n      Custom Header\n    </Typography>\n  </Drawer.Header>\n  <Drawer.Content style={{ padding: 32 }}>\n    <Typography>Custom styled content</Typography>\n  </Drawer.Content>\n  <Drawer.Footer style={{ backgroundColor: '#f0f0f0' }}>\n    <Button>Custom Footer</Button>\n  </Drawer.Footer>\n</Drawer>\n"})}),"\n",(0,s.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Choose appropriate placement"}),": Use ",(0,s.jsx)(n.code,{children:"left"})," for navigation menus, ",(0,s.jsx)(n.code,{children:"right"})," for filters/settings, ",(0,s.jsx)(n.code,{children:"bottom"})," for mobile sheets"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Consider content hierarchy"}),": Structure content with Header, Content, and Footer for consistency"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Implement proper navigation"}),": Ensure drawer actions don't conflict with main app navigation"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Handle mobile views"}),": Use appropriate sizes and consider touch targets"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Maintain focus management"}),": Let the component handle focus automatically with ",(0,s.jsx)(n.code,{children:"trapFocus"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Provide clear closing options"}),": Always include a way to close the drawer (close button, overlay click, back button)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Use consistent patterns"}),": Follow the same drawer structure across your app"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Theme integration"}),": Use ThemeProvider for consistent styling across light/dark modes"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"size-reference",children:"Size Reference"}),"\n",(0,s.jsx)(n.p,{children:"The drawer sizes are calculated as percentages of the screen dimension:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:"const drawerSizes = {\n  sm: '25%',   // Small drawer\n  md: '40%',   // Medium drawer (default)\n  lg: '60%',   // Large drawer\n  xl: '80%',   // Extra large drawer\n  full: '100%' // Full screen\n};\n"})}),"\n",(0,s.jsx)(n.p,{children:"For horizontal drawers (left/right), percentages apply to screen width.\nFor vertical drawers (top/bottom), percentages apply to screen height."}),"\n",(0,s.jsx)(n.h2,{id:"accessibility",children:"Accessibility"}),"\n",(0,s.jsx)(n.p,{children:"The Drawer component includes built-in accessibility features:"}),"\n",(0,s.jsx)(n.h3,{id:"react-native-accessibility",children:"React Native Accessibility"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:'<Drawer\n  open={open}\n  onClose={onClose}\n  trapFocus={true}          // Traps focus within drawer\n  returnFocus={true}        // Returns focus when closed\n>\n  <Drawer.Header>\n    <Typography variant="h6" accessibilityRole="heading">\n      Navigation Menu\n    </Typography>\n  </Drawer.Header>\n  <Drawer.Content>\n    <Button \n      accessibilityLabel="Go to home page"\n      accessibilityHint="Navigates to the main home screen"\n    >\n      Home\n    </Button>\n  </Drawer.Content>\n</Drawer>\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Note: Drawer.Header includes a close button by default (when ",(0,s.jsx)(n.code,{children:"showCloseButton"})," is true) that calls ",(0,s.jsx)(n.code,{children:"onClose"})," from Drawer automatically. You can override its behavior via ",(0,s.jsx)(n.code,{children:"closeButtonProps.onPress"}),"."]}),"\n",(0,s.jsx)(n.h3,{id:"features",children:"Features"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Modal behavior"}),": Uses React Native Modal for proper overlay handling"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Back button support"}),": Android back button automatically closes drawer"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Touch overlay"}),": Tapping outside the drawer closes it (configurable)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Focus management"}),": Optional focus trapping and return"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Screen reader support"}),": Works with accessibility services"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"animation-details",children:"Animation Details"}),"\n",(0,s.jsx)(n.p,{children:"The Drawer uses React Native's Animated API for smooth transitions:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Slide animation"}),": Drawer slides in from the specified edge"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Fade animation"}),": Overlay fades in/out simultaneously"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Duration"}),": Configurable through theme (default: 300ms)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Easing"}),": Theme-configurable easing curves ('linear' | 'easeIn' | 'easeOut' | 'easeInOut')"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Performance"}),": Uses native driver where possible for smooth animations"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"platform-differences",children:"Platform Differences"}),"\n",(0,s.jsx)(n.h3,{id:"android",children:"Android"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Back button automatically closes drawer (configurable with ",(0,s.jsx)(n.code,{children:"closeOnEscape"}),")"]}),"\n",(0,s.jsx)(n.li,{children:"Hardware back button handling"}),"\n",(0,s.jsx)(n.li,{children:"Material Design elevation shadows"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"ios",children:"iOS"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"iOS-style shadows and styling when using iOS theme"}),"\n",(0,s.jsx)(n.li,{children:"Respects safe area insets"}),"\n",(0,s.jsx)(n.li,{children:"Gesture-based navigation compatibility"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"related-components",children:"Related Components"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"../feedback/modal",children:"Modal"})," - For modal dialogs and overlays"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"../feedback/dialog",children:"Dialog"})," - For confirmation dialogs"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"../feedback/alert",children:"Alert"})," - For alert messages"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"../feedback/backdrop",children:"Backdrop"})," - For overlay backgrounds"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>o,x:()=>a});var t=r(6540);const s={},i=t.createContext(s);function o(e){const n=t.useContext(i);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);